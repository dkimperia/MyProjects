{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "\n",
    "class Porter:\n",
    "    PERFECTIVEGROUND = re.compile(u\"((ив|ивши|ившись|ыв|ывши|ывшись)|((?<=[ая])(в|вши|вшись)))$\")\n",
    "    REFLEXIVE = re.compile(u\"(с[яь])$\")\n",
    "    ADJECTIVE = re.compile(u\"(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$\")\n",
    "    PARTICIPLE = re.compile(u\"((ивш|ывш|ующ)|((?<=[ая])(ем|нн|вш|ющ|щ)))$\")\n",
    "    VERB = re.compile(\n",
    "        u\"((ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|уют|ит|ыт|ены|ить|ыть|ишь|ую|ю)|((?<=[ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)))$\")\n",
    "    NOUN = re.compile(\n",
    "        u\"(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$\")\n",
    "    RVRE = re.compile(u\"^(.*?[аеиоуыэюя])(.*)$\")\n",
    "    DERIVATIONAL = re.compile(u\".*[^аеиоуыэюя]+[аеиоуыэюя].*ость?$\")\n",
    "    DER = re.compile(u\"ость?$\")\n",
    "    SUPERLATIVE = re.compile(u\"(ейше|ейш)$\")\n",
    "    I = re.compile(u\"и$\")\n",
    "    P = re.compile(u\"ь$\")\n",
    "    NN = re.compile(u\"нн$\")\n",
    "\n",
    "    def stem(word):\n",
    "        word = word.lower()\n",
    "        word = word.replace(u'ё', u'е')\n",
    "        m = re.match(Porter.RVRE, word)\n",
    "        if m and m.groups():\n",
    "            pre = m.group(1)\n",
    "            rv = m.group(2)\n",
    "            temp = Porter.PERFECTIVEGROUND.sub('', rv, 1)\n",
    "            if temp == rv:\n",
    "                rv = Porter.REFLEXIVE.sub('', rv, 1)\n",
    "                temp = Porter.ADJECTIVE.sub('', rv, 1)\n",
    "                if temp != rv:\n",
    "                    rv = temp\n",
    "                    rv = Porter.PARTICIPLE.sub('', rv, 1)\n",
    "                else:\n",
    "                    temp = Porter.VERB.sub('', rv, 1)\n",
    "                    if temp == rv:\n",
    "                        rv = Porter.NOUN.sub('', rv, 1)\n",
    "                    else:\n",
    "                        rv = temp\n",
    "            else:\n",
    "                rv = temp\n",
    "\n",
    "            rv = Porter.I.sub('', rv, 1)\n",
    "\n",
    "            if re.match(Porter.DERIVATIONAL, rv):\n",
    "                rv = Porter.DER.sub('', rv, 1)\n",
    "\n",
    "            temp = Porter.P.sub('', rv, 1)\n",
    "            if temp == rv:\n",
    "                rv = Porter.SUPERLATIVE.sub('', rv, 1)\n",
    "                rv = Porter.NN.sub(u'н', rv, 1)\n",
    "            else:\n",
    "                rv = temp\n",
    "            word = pre + rv\n",
    "        return word\n",
    "\n",
    "    stem = staticmethod(stem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "\n",
    "def init_alphabet():\n",
    "    alphabet = ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ']\n",
    "    return alphabet\n",
    "\n",
    "\n",
    "def clear_text(string, alphabet):\n",
    "    result_line = ''\n",
    "    for i in string:\n",
    "        if i in alphabet:\n",
    "            result_line = result_line + i\n",
    "    return result_line\n",
    "\n",
    "\n",
    "def clear_spaces(string):\n",
    "    prov = 0\n",
    "    result_string = ''\n",
    "    for i in string:\n",
    "        if i == ' ':\n",
    "            prov += 1\n",
    "        else:\n",
    "            prov = 0\n",
    "        if prov <= 1:\n",
    "            result_string = result_string + i\n",
    "    if result_string[len(result_string) - 1] == ' ':\n",
    "        result_string = result_string[:-1]\n",
    "    return result_string\n",
    "\n",
    "\n",
    "def read_from_folder(path_to_train, alphabet):\n",
    "    text_train = []\n",
    "    step = 0\n",
    "    alphabet = init_alphabet()\n",
    "    words = []\n",
    "    train_data = []\n",
    "    files = os.listdir(path_to_train)\n",
    "    for index in range(0, len(files)):\n",
    "        print(files[index])\n",
    "        file = open(path_to_train + files[index], 'r', encoding='utf-8')\n",
    "        for line in file:\n",
    "            if step > 0:\n",
    "                line = line.lower()\n",
    "                line = clear_text(line, alphabet)\n",
    "                word_in_line = line.split(' ')\n",
    "                words.append(word_in_line)\n",
    "            else:\n",
    "                step = 1\n",
    "                text_train.append(line[:-1])\n",
    "        result_list = ''\n",
    "        step = 0\n",
    "        for line in words:\n",
    "            for word in line:\n",
    "                result_list = result_list + (Porter.stem(word)) + ' '\n",
    "        result_list = clear_spaces(result_list)\n",
    "        train_data.append(result_list)\n",
    "    return train_data, text_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Информатика (1).txt\n",
      "Информатика (10).txt\n",
      "Информатика (11).txt\n",
      "Информатика (12).txt\n",
      "Информатика (13).txt\n",
      "Информатика (14).txt\n",
      "Информатика (15).txt\n",
      "Информатика (16).txt\n",
      "Информатика (17).txt\n",
      "Информатика (18).txt\n",
      "Информатика (19).txt\n",
      "Информатика (2).txt\n",
      "Информатика (20).txt\n",
      "Информатика (21).txt\n",
      "Информатика (22).txt\n",
      "Информатика (23).txt\n",
      "Информатика (24).txt\n",
      "Информатика (25).txt\n",
      "Информатика (26).txt\n",
      "Информатика (27).txt\n",
      "Информатика (28).txt\n",
      "Информатика (29).txt\n",
      "Информатика (3).txt\n",
      "Информатика (30).txt\n",
      "Информатика (31).txt\n",
      "Информатика (32).txt\n",
      "Информатика (33).txt\n",
      "Информатика (34).txt\n",
      "Информатика (35).txt\n",
      "Информатика (36).txt\n",
      "Информатика (37).txt\n",
      "Информатика (38).txt\n",
      "Информатика (39).txt\n",
      "Информатика (4).txt\n",
      "Информатика (5).txt\n",
      "Информатика (6).txt\n",
      "Информатика (7).txt\n",
      "Информатика (8).txt\n",
      "Информатика (9).txt\n",
      "Математика (1).txt\n",
      "Математика (10).txt\n",
      "Математика (11).txt\n",
      "Математика (12).txt\n",
      "Математика (13).txt\n",
      "Математика (14).txt\n",
      "Математика (15).txt\n",
      "Математика (16).txt\n",
      "Математика (17).txt\n",
      "Математика (18).txt\n",
      "Математика (19).txt\n",
      "Математика (2).txt\n",
      "Математика (20).txt\n",
      "Математика (21).txt\n",
      "Математика (22).txt\n",
      "Математика (23).txt\n",
      "Математика (24).txt\n",
      "Математика (25).txt\n",
      "Математика (26).txt\n",
      "Математика (27).txt\n",
      "Математика (28).txt\n",
      "Математика (29).txt\n",
      "Математика (3).txt\n",
      "Математика (30).txt\n",
      "Математика (31).txt\n",
      "Математика (32).txt\n",
      "Математика (33).txt\n",
      "Математика (34).txt\n",
      "Математика (35).txt\n",
      "Математика (36).txt\n",
      "Математика (37).txt\n",
      "Математика (38).txt\n",
      "Математика (39).txt\n",
      "Математика (4).txt\n",
      "Математика (5).txt\n",
      "Математика (6).txt\n",
      "Математика (7).txt\n",
      "Математика (8).txt\n",
      "Математика (9).txt\n"
     ]
    }
   ],
   "source": [
    "classes = ['математика', 'информатика']\n",
    "alphabet = init_alphabet()\n",
    "path_to_train = \"C:\\\\тексты\\\\обучение\\\\\"\n",
    "path_to_test = \"C:\\\\тексты\\\\тестирование\\\\\"\n",
    "train_data = read_from_folder(path_to_train, alphabet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Информатика (40).txt\n",
      "Информатика (41).txt\n",
      "Информатика (42).txt\n",
      "Информатика (43).txt\n",
      "Информатика (44).txt\n",
      "Информатика (45).txt\n",
      "Информатика (46).txt\n",
      "Информатика (47).txt\n",
      "Информатика (48).txt\n",
      "Информатика (49).txt\n",
      "Информатика (50).txt\n",
      "Математика (40).txt\n",
      "Математика (41).txt\n",
      "Математика (42).txt\n",
      "Математика (43).txt\n",
      "Математика (44).txt\n",
      "Математика (45).txt\n",
      "Математика (46).txt\n",
      "Математика (47).txt\n",
      "Математика (48).txt\n",
      "Математика (49).txt\n",
      "Математика (50).txt\n"
     ]
    }
   ],
   "source": [
    "test_data = read_from_folder(path_to_test, alphabet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "IOPub data rate exceeded.\n",
      "The notebook server will temporarily stop sending output\n",
      "to the client in order to avoid crashing it.\n",
      "To change this limit, set the config variable\n",
      "`--NotebookApp.iopub_data_rate_limit`.\n",
      "\n",
      "Current values:\n",
      "NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n",
      "NotebookApp.rate_limit_window=3.0 (secs)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(train_data[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\stas\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:764: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'информатика', 'математика', 'математика', 'математика', 'математика', 'математика', 'математика', 'математика', 'математика', 'математика', 'математика', 'математика']\n",
      "['математика' 'математика' 'математика' 'математика' 'математика'\n",
      " 'математика' 'информатика' 'информатика' 'математика' 'информатика'\n",
      " 'информатика' 'математика' 'математика' 'математика' 'математика'\n",
      " 'математика' 'математика' 'математика' 'математика' 'математика'\n",
      " 'математика' 'математика']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "files = os.listdir(path_to_train)\n",
    "cv = TfidfVectorizer()\n",
    "input = cv.fit_transform(train_data[0])\n",
    "model = LogisticRegression(solver='lbfgs',n_jobs=1, C=1e5)\n",
    "model.fit(input, train_data[1])\n",
    "test = cv.transform(test_data[0])\n",
    "scores = model.score(test, test_data[1])\n",
    "print(test_data[1])\n",
    "print(model.predict(test))\n",
    "sns.heatmap(confusion_matrix(test_data[1], model.predict(test)), xticklabels=classes, yticklabels=classes, annot=True, fmt=\"d\",cmap=plt.cm.Blues)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
